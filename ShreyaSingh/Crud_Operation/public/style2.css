/* 

body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: #f0f0f0;
  }
  
  .background {
    background: linear-gradient(to right, #7b92ed, #f195ed); 
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .container {
    background: rgba(255, 255, 255, 0.9); 
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 500px;
  }
  
  h1 {
    margin-top: 0;
    color: #333;
  }
  
  .task-form {
    display: flex;
    margin-bottom: 20px;
  }
  
  .task-form input {
    flex: 1;
    padding: 10px;
    border: 2px solid #ddd;
    border-radius: 4px;
  }
  
  .task-form button {
    padding: 10px 20px;
    margin-left: 10px;
    border: none;
    border-radius: 4px;
    background-color: #ff7e5f;
    color: white;
    cursor: pointer;
  }
  
  .task-form button:hover {
    background-color: #feb47b;
  }
  
  .task-display {
    max-height: 400px;
    overflow-y: auto;
  }
  
  .task-list {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }
  
  .task-item {
    padding: 10px;
    border-bottom: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .delete-btn {
    background-color: #ff7e5f;
    border: none;
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .delete-btn:hover {
    background-color: #feb47b;
  }
   */





/* 
   <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>To-Do List</title>
  <link rel="stylesheet" href="/style.css">
  <script>
    document.addEventListener('DOMContentLoaded', () => {
    const input = document.querySelector('.task-form input');
    input.addEventListener('focus', () => {
      input.style.boxShadow = '0 0 8px rgba(255, 128, 128, 0.5)';
    });
    input.addEventListener('blur', () => {
      input.style.boxShadow = 'none';
    });
  });
  </script>
</head>
<body>
  <div class="background">
              <span><%= task.task %> - <%= task.created_at.toLocaleString() %></span>
    <div class="container">
      <h1>To-Do List</h1>

      <form class="task-form" action="/tasks" method="POST">
        <input type="text" name="task" placeholder="Add a new task" required>
        <button type="submit">Add</button>
      </form>

      <div class="task-display">
        <ul class="task-list">
          <% todoList.forEach(task => { %>
            <li class="task-item">
              <form action="/tasks/delete/<%= task.id %>" method="POST" style="display:inline;">
                <button type="submit" class="delete-btn">Delete</button>
              </form>
            </li>
          <% }) %>
        </ul>
      </div>
    </div>
  </div>
</body>
</html> */


/* 
const express = require('express');
const mysql = require('mysql2');
const app = express();

app.use(express.json());           // For JSON requests.
app.use(express.urlencoded({ extended: true })); // For form submissions.
app.use(express.static('public')); // For static files like CSS.
app.set('view engine', 'ejs');    // Setting EJS as the view engine.

// MySQL connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root', 
  password: 'shreyasingh', 
  database: 'tododb'
});

db.connect((err) => {
  if (err) throw err;
  console.log('Connected to MySQL');
});

// Route to render the homepage with tasks
app.get('/', (req, res) => {
  const sql = 'SELECT * FROM tasks ORDER BY created_at DESC';
  db.query(sql, (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    res.render('index', { todoList: results });
  });
});

// Route to add a new task
app.post('/tasks', (req, res) => {
  const { task } = req.body;
  if (!task) {
    return res.status(400).json({ error: 'Task is required' });
  }
  const sql = 'INSERT INTO tasks (task) VALUES (?)';
  db.query(sql, [task], (err) => {
    if (err) return res.status(500).json({ error: err.message });
    res.redirect('/'); 
  });
});

// Route to delete a task
app.post('/tasks/delete/:id', (req, res) => {
  const { id } = req.params;
  const sql = 'DELETE FROM tasks WHERE id = ?';
  db.query(sql, [id], (err) => {
    if (err) return res.status(500).json({ error: err.message });
    res.redirect('/'); 
  });
});

// Start the server
app.listen(8080, () => {
  console.log('Server started on port 8080');
});
 */
